#!/bin/bash

#/ NAME
#/     build-cache-squid -- prime the squid cache by fetching a list of urls
#/
#/ SYNOPSIS
#/     build cache squid

# figure out the project root under which bin, lib live
shome="$(unset CDPATH; cd -P -- "$(dirname -- "$BASH_SOURCE")/.." && pwd -P)"

# load a jason bourne library
source "$shome/libexec/_jason"

DEFINE_boolean clean "$FLAGS_FALSE" "delete the cache"
DEFINE_boolean warm "$FLAGS_FALSE" "warm the cache"

# entry point
function main {
  local save_pwd="$PWD"

  local cmd_squid="$(which squid3 2>&- || true)"
  if [[ ! -x "$cmd_squid" ]]; then
    cmd_squid="squid"
  fi

  cmd_squid="$cmd_squid -f $shome/etc/squid.conf"

  if nc -z localhost 3128; then
    $cmd_squid -k kill
  fi

  : ${OFFLINE:=$(pwd)}

  if [[ "$FLAGS_clean" = "$FLAGS_TRUE" || ! -d $OFFLINE/vault/squid-cache ]]; then
    rm -rf $OFFLINE/vault/squid-cache
    $cmd_squid -z
  fi

  export http_proxy=htp://localhost:3128

  if [[ "$FLAGS_warm" = "$FLAGS_TRUE" ]]; then
    (set +f; rm -f $shome/var/squid/logs/*.log)
  fi

  $cmd_squid; sleep 3
  nc -z localhost 3128

  if [[ "$FLAGS_warm" = "$FLAGS_TRUE" ]]; then
    cat $save_pwd/config/squid-urls.txt | sort -u | runmany 1 1 'echo "$1"; curl -s -o /dev/null "$1"' || true

    logger_info "unexpected accesses:"
    cat $shome/var/squid/logs/access.log | sort -k4 | egrep -v "TCP_MISS/200|TCP_DENIED/403|TCP_HIT/200" || logger_info "clear"

    logger_info "urls to fetch: $(cat $save_pwd/config/squid-urls.txt | wc -l)"
    logger_info "urls fetched: $(cat $shome/var/squid/logs/access.log | wc -l)"
  fi

  local tmp_urls="$(mktemp -t XXXXXXXXX)"
  touch $save_pwd/config/squid-urls.txt
  { cat $save_pwd/config/squid-urls.txt; awk '{print $7}' $shome/var/squid/logs/access.log; } | LANG=C sort -u > $tmp_urls
  mv $tmp_urls $save_pwd/config/squid-urls.txt
}

require sub "$BASH_SOURCE" "$@"
